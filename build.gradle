group 'craftedcart'
version '1.3-SNAPSHOT'

apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    maven {
        url "http://repo.jenkins-ci.org/releases/" //Required for GitHub API
    }
}

dependencies {
    compile 'org.lwjgl.lwjgl:lwjgl:2.9.3' //LWJGL
    compile 'org.lwjgl.lwjgl:lwjgl_util:2.9.3' //LWJGL
    compile 'org.slick2d:slick2d-core:1.0.1' //Slick2D
    compile 'com.googlecode.json-simple:json-simple:1.1.1' //JSON Simple
    compile 'com.intellij:annotations:12.0' //IntelliJ Annotations

    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.5' //Log4J 2 API
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.5' //Log4J 2 Core

    compile group: 'commons-io', name: 'commons-io', version: '2.5' //Apache Commons-IO

    compile group: 'org.kohsuke', name: 'github-api', version: '1.77' //GitHub API
    compile group: 'org.eclipse.jgit', name: 'org.eclipse.jgit', version: '4.5.0.201609210915-r' //JGit

    compile group: 'org.xerial', name: 'sqlite-jdbc', version: '3.14.2.1' //SQLite-JDBC for databases

    compile project(':FluidUI')
    compile project(':SMBWorkshopExporter')

    //testCompile group: 'junit', name: 'junit', version: '4.11'
}

def resolvedArtifacts = configurations.compile.resolvedConfiguration.resolvedArtifacts
def platforms = ['windows', 'linux', 'osx']
platforms.each {
    def platform = it
    tasks.create(name: "$platform" + 'Natives', type: Copy) {
        from platformNatives(platform, resolvedArtifacts).toArray()
        into "$buildDir/natives-" + platform
    }
}

task natives {
    description "Copies native libraries to an appropriate directory."
    dependsOn tasks.matching { it.name.contains('Natives') }
}

def platformNatives(platform, artifacts) {
    def classifier = 'natives-' + platform
    def matches = artifacts.findAll { it.classifier == classifier }
    matches.collect { it.file }.collect { zipTree(it) }
}

jar {
    manifest {
        attributes (
            'Main-Class': 'craftedcart.smblevelworkshop.SMBLevelWorkshop'
        )
    }

    doFirst {
        from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}
